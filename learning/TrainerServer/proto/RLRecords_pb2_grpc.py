# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from . import RLRecords_pb2 as RLRecords__pb2


class SlitherTrainerStub(object):
    """Service that takes in the environment state from the SlitherPlayer
    And responds
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NextMove = channel.unary_unary(
                '/SlitherTrainer/NextMove',
                request_serializer=RLRecords__pb2.Request.SerializeToString,
                response_deserializer=RLRecords__pb2.Response.FromString,
                )
        self.Reset = channel.unary_unary(
                '/SlitherTrainer/Reset',
                request_serializer=RLRecords__pb2.RewardRequest.SerializeToString,
                response_deserializer=RLRecords__pb2.Nothing.FromString,
                )
        self.Reward = channel.unary_unary(
                '/SlitherTrainer/Reward',
                request_serializer=RLRecords__pb2.RewardRequest.SerializeToString,
                response_deserializer=RLRecords__pb2.Nothing.FromString,
                )


class SlitherTrainerServicer(object):
    """Service that takes in the environment state from the SlitherPlayer
    And responds
    """

    def NextMove(self, request, context):
        """Based on the request, NextMove responds with the proper move response
        integer that maps to an Enum
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SlitherTrainerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NextMove': grpc.unary_unary_rpc_method_handler(
                    servicer.NextMove,
                    request_deserializer=RLRecords__pb2.Request.FromString,
                    response_serializer=RLRecords__pb2.Response.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=RLRecords__pb2.RewardRequest.FromString,
                    response_serializer=RLRecords__pb2.Nothing.SerializeToString,
            ),
            'Reward': grpc.unary_unary_rpc_method_handler(
                    servicer.Reward,
                    request_deserializer=RLRecords__pb2.RewardRequest.FromString,
                    response_serializer=RLRecords__pb2.Nothing.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SlitherTrainer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SlitherTrainer(object):
    """Service that takes in the environment state from the SlitherPlayer
    And responds
    """

    @staticmethod
    def NextMove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SlitherTrainer/NextMove',
            RLRecords__pb2.Request.SerializeToString,
            RLRecords__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SlitherTrainer/Reset',
            RLRecords__pb2.RewardRequest.SerializeToString,
            RLRecords__pb2.Nothing.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SlitherTrainer/Reward',
            RLRecords__pb2.RewardRequest.SerializeToString,
            RLRecords__pb2.Nothing.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
